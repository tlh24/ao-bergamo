Dec 17 2020

-- Need a GUI, so we can adjust & check the centroid images. 
-- Need consistent numbering on the centroids.  Sometimes it misses some, which changes the meaning - ! 
-- Need to figure out how to convert pixel coordinates into waves or at least physical units. 
-- Some centroids are noisier than others; may have to weight individual centroids. 

Dec 18 2020

Have a gui -- repurposed from the sewing machine project -- seems to work well enough. 
Am thinking that we start with numbering and locations from the reference flat, which can be loaded at the start of the program. 
Need to read a matlab file via libmatio.. 

More importantly, will this wavefront sensor have sufficient precision to stabilize the deformable mirror?  
I guess if there are slow drifts over the whole aperture, probaby not --
to detect slight tip/tilt, on the order of many waves at the edges, you need to average over all the lenslets.  
To increase the sensitivity, we need to increase the focal length.
(Which of course decreases the dynamic range..)
The thorlabs WFS have a focal length of 4.1mm; we are using an array with a fl of 3.17mm.  So, they should be in the same ballpark..

Feb 4 2021

Slowly making progress on this -- looking back on my notes above! 
Need to incoporate active DM control into the C++ program; 
running the loop in matlab is slower. 
In the C++ program we can adjust the DM signal shortly after getting the centroids. 
Trick is to be careful about indexing. 
Flow: 
-- Get centroids. 
-- Index them based on the control matrices
-- Collate into a measurement vector + 1
--- Subtract the mean here; no tip tilt correction.
-- Get the desired zernike modes from matlab (Will need the dZx and dZy matrices)
-- Expand to an identically-sized measurement vector
-- Subtract, matrix multiply..
-- Perform PID control, or just PI control, to update the DM actuators. 

If we hold the zernike matrices and desired modes in the C++ program, 
then we need to do some careful frame synchronization, and can do full modal AO correction without matlab.  (Of course matlab might well be in there for visualization, through memmaped files..)

Variables we need sent to shwfs:
-- mask
-- control matrix Cforward
-- Z, dZx, dZy (this depends on calbrated locations of the centroids .. note we are approximating the derivative as constant here, when it is not & should really be updated as the centroids move.. meh.. given our actual correction tends to be on the order of one pixel, i think this is an OK approximation)

Also, at some point we should obtain a full dataset where the DM is stimulated not just with random noise, but also with Zernike modes.  This data can be used to fit a NN for translating WFS dx dy to actuator control signals, including nonlinearities.  

Feb 19 2021
FOV of the microscope, Olympus 20x objective
1x scan zoom:
X: 408um Y:719um
2x scan zoom: 
X: 202um Y:362um (expected: 204 / 360)
3x scan zoom:
X: 137um Y:240um (expected: 135 / 240)

** fixed in the machine configuration file ** 

Feb 23 2021
Trying out the Zernike modal optimization of image intensity
Using slices from Chris, GFP labeled VTA neurons.  
Looks somewhat ok, though I'm not sure about the improvement: 
Went from 6.74 to 7.32 arbitrary units at 168um from the surface
using 27% of 2065mW at 4x zoom.  (8.6% improvement)
Switching between compensated and uncompensated, I cannot see much of a difference.  
Same test on the surface: 
Image intensity went from 7.03 to 7.79 at 4% f 2051mW, 4 zoom. (10% improvement)
Primary change in observable when switching was lateral shift of a few um. 
Same test 50um deep: 
No change in flurescence intensity.  
Slight correction of order 3 mode 0. (astigmatism)

Feb 25 2021
Changed the logic of zernopt t od two passes through each mode+der: forward and backward. 
If both passes agree that a given coeficient setting is best, then the Zernike command is updated.  
This seems to commonly update astigmatism and a few higher-order modes; 
I suspect what it's doing is semi-optimizing the PSF not to be tight and small, but rather to include out-of-plane fluorescence. 
Testing this code was done on Chris Magnus's GFP labeled VTA neurons
He mad some 300um slices of a fixed brain for this purpose; it's working very well for testing. 
Still, don't get a dramatic improvement in intensity. 
Will need to test on a window?

June 2 2021
The 1um poystyrene beds don't seem to bleach! Or, at least, they bleach very very slowly.  
Power was 4% at 960nm.  
SNR at this power level was very good (though I could have tweaked the GDD a little too.. maxed out is probably the best. )

Green retrobeads are nearly as good -- though my test slide has a much thinner layer than the 1um PS beads. 
They started to bleach (?) after about 10k frames.  Which is plenty for optimization! 

Got some example images from the levelling scope -- will need a custom GUI for aligning the window.  I'm thinking actual = green; reference = magenta.  

August 25 2021

Well, the leveling turned out to be simple -- no custom GUI was required!  You can see the the reflection off the cranial window & center it with just the camera image. 

Need to make some notes on the things I've been doing. 

1 -- changed the genetic optimization to run multiple times during one file recording.  Typically, I've run the optimization for 20k samples, ten times through, with temperature varying from 0.006 to 0.0015.  
This doesn't quite asymptote, but it definitely corrects the wavefront well. 
Based on these recordings, I take the difference in wavefront centroids from the 'best wavefront'
(itself a median of the best 400, as quantified by image brightness)
These deltas are decomposed via SVD.  The resulting V matrix is orthonormal and sorted.  The columns of V are then used as delta basis vectors for adjusting the 'best' or flat wavefront. 
Adjustment is manual, through ten sliders in the shwfs GUI.  Range of the sliders is dictated by 8x the standar deviation of the U*S columns (e.g. what V' is multiplied by..)

In experimentation today, this modification of the desired wavefront only very slightly improved image quality, maybe 2-5%, when looking at Helen / Filip's rats.  
The AO calibration was done with the 1um NH2 terminated polystyrene beads, fluorescein color (& dye, probably).  These don't seem to bleach at all, when stimulated with 1% power at 960nm.  

The idea was to restrict optimization along the same dimensions that the GA moved in order to improve in-vivo brightness and contrast.  
From examination of the V' projected wavefront data, these trajectories are relatively smooth, and don't frequently cross the origin, so it seems plausible that manual line-search in these dimensions would be OK.  

But, not so much ... the calibration is good, image quality is fine, but improvements are not large like desired (>= 2x).  

Still, these jf669 mice are great as they bleach very slowly, and are good for AO experimentation. 

August 27 2021
Green latex retrobeads do not seem to bleach too quickly!  That's good!

Today experimented with SVD of the calibration matrix. 
It looks OK... 
for optimization, suggest we take the components from that, regress them to the associated DM actuator values (through the forward matrix), 
and then search along these directions for online wavefront optimization. 

Also of note: experimented with tweaking the SVD components today while trying to bleach the retrobeads.  The middle setting (e.g. no modification) was consistently the best in terms of brightness for the retrobeads image. 
This adds more evidence to the idea that in order to improve image quality in vivo, 
we need to run the optimization in vivo.  
A corrolary question is: how can we optimize the optimizer? 
Making it operate in a basis set different than the raw actuator values makes sense ... it may also be the case that the function is convex (?) which means that variables can be optimized serially, 
and this will work even if it's not conjugate gradients.  
(could also do simplex optimization?)

Sept 23 2021

SLAP1, Kaspar, Figure 1, much better than my optical schematic (because it's simpler?)
https://www.nature.com/articles/s41592-019-0493-9/figures/1
SLAP records spines at 1016Hz
looks like a good set of references too. 

October 8 2021
The DM most definitely responds within one SHWFS frame.  No problem!
In fact, I think there was a bug in the control code that was slowing things down... 
For speed purposes, might want to reconsider the pipeline / move the optimization to the scanimage computer and simply remote control the DM? 

